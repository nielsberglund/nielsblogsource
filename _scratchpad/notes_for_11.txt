65536 65,536 is the product of 2 to the power of 16.  Why use this particular product?  Because it is the largest number that can be expressed by 2 eight-bit bytes of data. 

int - nullable
1 column 1 row 2023 2019
1 column 2 rows 2027

bigint - nullable
1 column 1 row 1050 1042
1 column 2 rows 1058

int - !nullable
1 column 1 row 36 32
1 column 2 rows 40

bigint - !nullable
1 column 1 row 40 32
1 column 2 rows 48


4046
4054
4062

2100
2116


Remember how we in [Internals - IX][si9] said that SqlSatellite communicated with SQL Server over sockets, and 




`sqllang!SpExecuteExternalScript` is called.
`sqllang!CSQLSatelliteConnection::OpenNpConnection`
`launchpad!Np::AcceptConnection`
`sqllang!CSQLSatelliteConnection::WriteMessage`
`launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo`
`launchpad!CSQLSatelliteConnection::WriteMessage`
`sqllang!CUDXR_ExternalScript::ConnectToSatellite`
`sqllang!CSQLSatelliteConnection::WriteMessage`
`sqllang!CSQLSatelliteConnection::WriteMessage`

`sqllang!CSQLSatelliteConnection::WriteMessage`
`sqllang!CSQLSatelliteConnection::WriteMessage`
`launchpad!CSQLSatelliteConnection::WriteMessage`









Data transfer is not data going from R to SQL Server, but the other direction as well. So the `@input_data_1` in *Code Snippet 2* sent to R is transferred via the SqlSatellite, as well as the resultset coming back from the `OutputDataSet`. Input and output arguments are also transferred via the SqlSatellite. The data exchange is in a custom data format optimized for fast transfer, and together with `BxServerLink.dll` - (which we briefly discussed in [Internals - VIII][si8]) - it performs type conversions etc.

Let's see what it looks like, using WinDbg. Seeing that we don't have any debug symbols for the SqlStallite dll, we'll only look at SQL Server for now. Attach WinDbg to SQL Server and browse for routines with the name SqlSatellite: `x  /1 *!SqlSatellite*` By using the option `/1` you'll only see the names. That should give you 

``` cpp title:"Routines"
0:064> x /1 *!SqlSatellite*
sqllang!SQLSatelliteRowDataReader::Read
sqllang!SQLSatelliteRowDataWriter::Init
sqllang!SQLSatelliteRowDataReader::`vftable'
sqllang!SQLSatelliteRowDataWriter::`vftable'
sqllang!SQLSatelliteRowDataWriter::Write
sqllang!SQLSatelliteRowDataReader::Init
sqllang!SQLSatelliteConnectionHub::Init
sqllang!SQLSatelliteConnectionHub::~SQLSatelliteConnectionHub
```
**Code Snippet 4:** "SqlSatellite Routines"

*Code Snippet 4* gives us a couple of interesting classes: `SQLSatelliteRowDataReader` and `SQLSatelliteRowDataWriter`. To me at least those names indicates some sort of data handling. 



Now we know that SQL Server has a named pipe to the launchpad service, and the launchpad service has an IOCP to Rterm, and from Rterm it is a named pipe to BxlServer:

{% img center /images/posts/sql_r_services_9_comms.png 650 193 %}
**Figure 12:** *Communication Mechanisms*

In *Figure 12* the numbers indicates:

* 1 - named pipe.
* 2 - IOCP.
* 3 - named pipe. from teh 

The question still stands though, how does the data get transferred to SQL Server? 







SQL Satellite is an extensibility API, included in the database engine starting with SQL Server 2016, that supports external code or external runtimes implemented using C or C++.
BxlServer uses SQL Satellite for these tasks:
Reading input data
Writing output data
Getting input arguments
Writing output arguments
Error handling
Writing STDOUT and STDERR back to client
SQL Satellite uses a custom data format that is optimized for fast data transfer between SQL Server and external script languages. It performs type conversions and defines the schemas of the input and output datasets during communications between SQL Server and the external script runtime.









{% img center /images/posts/<image_name.ext> w h %}
**Figure 1:** **

## ~ Finally

If you have comments, questions etc., please comment on this post or [ping][ma] me.

[ma]: mailto:niels.it.berglund@gmail.com
[mp]: https://blog.acolyer.org
[iq]: https://www.infoq.com/
[ew]: http://sqlonice.com/
[re]: http://blog.revolutionanalytics.com
[sqsk]: https://www.sqlskills.com
[ba]: https://twitter.com/bob_albright
[sinst]: {% post_url 2017-03-04-microsoft-sql-server-2016-r-services-installation %}
[si1]: {% post_url 2017-03-18-microsoft-sql-server-r-services---internals-i %}
[si2]: {% post_url 2017-04-02-microsoft-sql-server-r-services---internals-ii %}
[si3]: {% post_url 2017-04-13-microsoft-sql-server-r-services---internals-iii %}
[si4]: {% post_url 2017-04-23-microsoft-sql-server-r-services---internals-iv %}
[si5]: {% post_url 2017-05-01-microsoft-sql-server-r-services---internals-v %}
[si6]: {% post_url 2017-05-16-microsoft-sql-server-r-services---internals-vi %}
[si7]: {% post_url 2017-07-11-microsoft-sql-server-r-services---internals-vii %}
[si8]: {% post_url 2017-07-22-microsoft-sql-server-r-services---internals-viii %}
[si9]: {% post_url 2017-08-18-microsoft-sql-server-r-services---internals-ix %}
[ba]: https://twitter.com/bob_albright
[pe]: https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx
[pm]: https://technet.microsoft.com/en-us/sysinternals/processmonitor.aspx
[1]: https://en.wikipedia.org/wiki/Tabular_Data_Stream
[2]: https://www.wireshark.org/
[3]: https://nmap.org/npcap/

2017-08-18-microsoft-sql-server-r-services---internals-ix



sqllang!SpExecuteExternalScript
sqllang!CSQLSatelliteConnection::OpenNpConnection
sqllang!CSQLSatelliteConnection::WriteMessage

bp sqllang!SQLSatelliteRowDataWriter::Init

sqllang!CUDXR_ExternalScript::ConnectToSatellite

sqllang!CSQLSatelliteMessageServiceStart::WritePayLoad
.cls
sqllang!CSQLSatelliteMessageServiceSetup::WritePayload

sqllang!CSQLSatelliteMessageDataChunk::WritePayloadHeader

sqllang!SpExecuteExternalScript
sqllang!SQLSatelliteRowDataWriter::Init
sqllang!CSQLSatelliteConnection::OpenNpConnection
sqllang!CSQLSatelliteMessageServiceStart::WritePayLoad
sqllang!CSQLSatelliteConnection::WriteMessage
sqllang!CUDXR_ExternalScript::ConnectToSatellite
sqllang!CSQLSatelliteMessageServiceSetup::WritePayload
sqllang!CSQLSatelliteConnection::WriteMessage
sqllang!CSQLSatelliteConnection::WriteMessage


0:113> bp sqllang!SpExecuteExternalScript
0:113> bp sqllang!CSQLSatelliteConnection::OpenNpConnection
0:113> bp sqllang!CUDXR_ExternalScript::ConnectToSatellite
0:113> bp sqllang!CSQLSatelliteConnection::WriteMessage


0:033> bp launchpad!Np::AcceptConnection
0:033> bp launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo
0:033> bp launchpad!CSQLSatelliteConnection::WriteMessage


sqllang!CSatelliteCargoContext::SendPackets
sqllang!CSatelliteCargoContext::SendRemainingChunk
sqllang!CSatelliteCargoContext::SendChunkEnd
sqllang!CSatelliteCargoContext::PrepareChunkEndPacket
sqllang!CSatelliteCargoContext::SendChunkEndMessage
sqllang!CUDXR_ExternalScript::PushEOS
sqllang!CUDXR_ExternalScript::PullRow
sqllang!CSQLSatelliteMessageDataChunk::WritePayloadHeader
sqllang!CSQLSatelliteMessageDataChunk::ReadPayloadHeader
sqllang!CSatelliteProxy::PostSetupMessage


sqllang!CSatelliteCargoContext::Init

sqllang!CSQLSatelliteConnection::AuthenticateConnection

sqllang!CSQLSatelliteConnection::DataCargoAcceptTask


sqllang!CSQLSatelliteConnection::FireAuthenticationXEvent



sqllang!CSatelliteProxy::RetrieveConnection

sqllang!CSQLSatelliteConnection::DeliverMessage

sqllang!Tcp::WriteAsync



sqllang!SNIProcessAddProviderOnWorker

sqllang!SNIAddProviderEx

sqllang!CSQLSatelliteConnection::WriteMessage
sqllang!CUDXR_ExternalScript::ConnectToSatellite
sqllang!CSatelliteProxy::PostSetupMessage
sqllang!CUDXR_ExternalScript::PushEOS
sqllang!CSatelliteCargoContext::PrepareChunkEndPacket
sqllang!CSQLSatelliteMessageDataChunk::WritePayloadHeader
sqllang!CSatelliteCargoContext::SendPackets
sqllang!CSatelliteCargoContext::SendChunkEnd


breaking:
sqllang!CSQLSatelliteConnection::WriteMessage
--connect
sqllang!CUDXR_ExternalScript::ConnectToSatellite
TCP Receive 217
TCP Receive 17
sqllang!CSatelliteProxy::PostSetupMessage
sqllang!CSQLSatelliteConnection::WriteMessage
TCP Receive 204
sqllang!CUDXR_ExternalScript::PushEOS
sqllang!CSatelliteCargoContext::SendChunkEnd
sqllang!CSatelliteCargoContext::SendChunkEndMessage
sqllang!CSatelliteCargoContext::PrepareChunkEndPacket
sqllang!CSQLSatelliteConnection::WriteMessage
TCP Receive 28


tcp.srcport==49912

tcp.srcport==56812 ||  tcp.dstport== 56812


gRQto3yZx2
yrt3DBTSoE

bp sqllang!CSQLSatelliteConnection::AuthenticateConnection+0x9d
bp sqllang!CSQLSatelliteConnection::AuthenticateConnection+0x100

